## Put comments here that give an overall description of what your
## functions do

## create the special matrix that can cache its inverse

makeCacheMatrix <- function(x = matrix()) {
    m <- NULL
    set <- function(y){
        x <<- y
        m <<- NULL
    }
    get <- function()x
    setinverse <- function(inverse) m <<- inverse
    getinverse <- function() m
    list(set = set, 
         get = get, 
         setinverse = setinverse, 
         getinverse = getinverse)
}

## compute the inverse of special "matrix"returned.

##  If the matrix has already been calculatd, retrieve the inverse of the cache

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
    m <- x$getinverse()
    if(!is.null(m)){
        message("getting cached data")
        return(m)
    }
    data <- x$get()
    m <- solve(data, ...)
    x$setinverse(m)
    m
}

##test
> test <- makeCacheMatrix(matrix(2:5,2,2))
> test$get()
     [,1] [,2]
[1,]    2    4
[2,]    3    5
> test$getinverse()
NULL
> cacheSolve(test)
     [,1] [,2]
[1,] -2.5    2
[2,]  1.5   -1
> test$getinverse()
     [,1] [,2]
[1,] -2.5    2
[2,]  1.5   -1

